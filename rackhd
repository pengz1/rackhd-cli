#!/usr/bin/env python

# -*- coding: UTF-8 -*-

'''
This script is a command line implementation for RackHD
'''

import os
import re
import urlparse
from utils import rackhd_services as rackhd_services
from utils import arg_utils as arg_utils
from utils import arg_parser as arg_parser
import http_request as http_request

#return a tuple with 0: recognized commands namespace and 1: unparsed commands
ARG_LIST, ARG_LIST_UNKNOWN = arg_parser.parse_arguments()

def operate_rackhd_service(operator, services):
    '''
    Operate RackHD services.
    '''
    operator = operator + '_rackhd_services'
    if services == 'all':
        services = None
    rackhd = rackhd_services.RackhdServices(services)
    getattr(rackhd, operator)()

def parse_api_options(args):
    '''
    Parse API operatinon options
    '''
    address = {
        'server': '172.31.128.1',
        'port': '9080',
        'protocol': 'http'
    }
    # Example api /api/current/nodes/<id>/workflows/action
    api = {
        'opr': args.opr or 'nodes',
        'id':  args.identity or '',
        'subopr': args.subopr or '',
        'param': args.param or ''
    }
    api_ver = args.ver or 'current'
    api_string = 'api'
    query = ''

    if args.header and args.header != 'application/json':
        header = args.header
    else:
        header = {'content-type': 'application/json'}
    options = {
        'method': args.method,
        # GET, DELETE don't require header
        'url': None,
        'header': header,
        'payload': args.payload or ''
    }
    url_path = '/{}/{}'.format(api_string, api_ver)
    if args.api: # User can specify api url
        url_path = os.path.join(url_path, args.api)
    else:
        url_path = os.path.join(url_path, api['opr'], api['id'], api['subopr'], api['param'])
    if url_path.endswith('/'):
        url_path = url_path[:-1]
    netloc = '{}:{}'.format(address['server'], address['port'])
    if args.graph:
        query = 'name={}'.format(args.graph)
    url = urlparse.urlunparse((
        address['protocol'], # scheme
        netloc,
        url_path, #path
        '', #params
        query, #query
        False #fragment
    ))
    options['url'] = url
    return options

def parse_position_args(unknown_args, known_args):
    '''
    Parse and combine all arguments
    :param unknown_args: tuple from argparse parse_known_args methods
    :param known_args: NameSpace object from argparse parse_known_args methods
    '''
    # Supported unknow commands
    arg = unknown_args[0]
    pattern = re.compile("^[a-z0-9]{24}$")
    if pattern.match(arg):
        parser = getattr(arg_utils, 'parse_position_mongo_args')
    else:
        assert arg in ['node', 'service', 'test', 'install', 'sku', 'log', 'config'],\
            'Position argument {} is not supported'.format(arg)
        parser = getattr(arg_utils, 'parse_position_{}_args'.format(arg))
    args = parser(unknown_args, known_args)
    return args

def run():
    """
    Run commands
    """
    arg_utils.parse_all_known(ARG_LIST)
    if ARG_LIST_UNKNOWN:
        parse_position_args(ARG_LIST_UNKNOWN, ARG_LIST)
    if ARG_LIST.service:
        arg_utils.parse_position_service_args(ARG_LIST_UNKNOWN, ARG_LIST)
        operate_rackhd_service(ARG_LIST.service, ARG_LIST.services)
    if ARG_LIST.test:
        pass
    if ARG_LIST.log:
        pass
    elif ARG_LIST.opr:
        options = parse_api_options(ARG_LIST)
        request = getattr(http_request, 'http_{}'.format(options['method'].lower()))
        res = request(options)
        print "{{\"data\": {}, \"_api\": \"-X{} {}\", \"_status\": {}}}".format(
            res.content or "\"\"", options["method"], res.url, res.status_code)

if __name__ == '__main__':
    run()
